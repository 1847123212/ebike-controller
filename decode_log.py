#!/usr/bin/env python3

# Decode binary log generated by log_task.c

import struct
from collections import namedtuple

logstruct = struct.Struct("<IIIIffffffffff8siiiIIff")
logtuple = namedtuple('LogTuple',
    ('checksum', 'systime', 'alltime_distance_m', 'trip_distance_m',
     'wheel_velocity', 'wheel_accel', 'motor_rpm', 'motor_target_current',
     'battery_voltage', 'battery_current', 'mosfet_temperature', 'duty_limit',
     'hill_accel', 'pedal_accel', 'state', 'motor_angle', 'hall_angle', 'assist_level',
     'events', 'irq_time', 'motor_voltage', 'motor_current'))

def get_checksum(data):
    words = list(struct.iter_unpack('<I', data)) + [(0,)] * 64
    words = words[:64]
    checksum = 0xAAAA
    for w in words[1:]:
        checksum = (checksum ^ w[0]) & 0xFFFFFFFF;
        checksum = (checksum ^ (checksum << 13)) & 0xFFFFFFFF;
        checksum = (checksum ^ (checksum >> 17)) & 0xFFFFFFFF;
        checksum = (checksum ^ (checksum << 5)) & 0xFFFFFFFF;
    return checksum

def decode_log(file):
    for line in file:
        line = line.strip()
        if len(line) < 128 or len(line) % 8 != 0: continue

        data = bytes.fromhex(line)
        values = logtuple._make(logstruct.unpack(data[:logstruct.size]))

        checksum = get_checksum(data)
        if checksum != values.checksum:
            print("Wrong checksum, expected %08x, got %08x" % (values.checksum, checksum))
            continue

        yield values

if __name__ == '__main__':
    import sys

    header = '# '
    for i, column in enumerate(logtuple._fields[1:]):
        header += '%02d' % (i + 1) + column[:8].ljust(8) + ' '
    print(header)

    for entry in decode_log(open(sys.argv[1], 'r')):
        line = '  '
        for n, v in zip(entry._fields, entry):
            if n == 'checksum':
                continue
            elif isinstance(v, float):
                line += '%10.3f ' % v
            elif isinstance(v, bytes):
                line += '%-10s ' % (v.decode('ascii', 'ignore').replace('\0', ''))
            elif n == 'events':
                line += '0x%08x ' % v
            else:
                line += '%10d ' % v
        print(line)

